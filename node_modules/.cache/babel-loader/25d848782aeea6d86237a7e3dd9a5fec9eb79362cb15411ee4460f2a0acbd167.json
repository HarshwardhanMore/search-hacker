{"ast":null,"code":"// // App.js\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import SearchBar from './components/SearchBar';\n// import SearchResults from './components/SearchResults';\n// import PostDetail from './components/PostDetail';\n// import \"./App.css\"\n\n// const App = () => {\n//   const [searchResults, setSearchResults] = useState([]);\n//   const [selectedPost, setSelectedPost] = useState(null);\n\n//   const onBack = () => {\n//     setSelectedPost(null);\n//   }\n//   const handleSearch = async (query) => {\n//     try {\n//       const response = await axios.get(\n//         `http://hn.algolia.com/api/v1/search?query=${query}`\n//       );\n//       setSearchResults(response.data.hits);\n//       setSelectedPost(null); // Reset selected post when a new search is performed\n//     } catch (error) {\n//       console.error('Error fetching search results', error);\n//     }\n//   };\n\n//   const handleResultClick = async (result) => {\n//     try {\n//       const [postResponse, authorResponse] = await Promise.all([\n//         axios.get(`http://hn.algolia.com/api/v1/items/${result.objectID}`),\n//         axios.get(`http://hn.algolia.com/api/v1/users/${result.author}`),\n//       ]);\n\n//       const postDetails = postResponse.data;\n//       const authorDetails = authorResponse.data;\n\n//       setSelectedPost({ ...postDetails, authorDetails });\n//     } catch (error) {\n//       console.error('Error fetching post details', error);\n//     }\n//   };\n\n//   return (\n//     <div className='parent'>\n//       {selectedPost ? (\n//         <div className='main-2'>\n//           {/* <button onClick={() => setSelectedPost(null)}>Back</button> */}\n//           <PostDetail post={selectedPost} onBack={onBack}/>\n//         </div>\n//       ) : (\n//         <div className='main'>\n//           <div className='main-top'>\n//             <h1 className='heading'>Hacker News Search</h1>\n//             <SearchBar onSearch={handleSearch} />\n//           </div>\n//           {searchResults.length === 0 ? <div className='noresult'>Search For Results</div> :\n//             <div className='main-bottom'>\n//               <SearchResults\n//                 results={searchResults}\n//                 onResultClick={handleResultClick}\n//                 />\n//             </div>\n//             }\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// // #fbfaf8 - white\n// // 0A122A - blue\n// // 698F3F - green\n// // E7DECD - bone\n// // 804E49 - chocolate\n\n// // App.js\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import SearchBar from './components/SearchBar';\n// import SearchResults from './components/SearchResults';\n// import PostDetail from './components/PostDetail';\n// import './App.css';\n\n// const App = () => {\n//   const [searchResults, setSearchResults] = useState([]);\n//   const [selectedPost, setSelectedPost] = useState(null);\n//   const [loading, setLoading] = useState(false);\n\n//   const onBack = () => {\n//     setSelectedPost(null);\n//   };\n\n//   const handleSearch = async (query) => {\n//     try {\n//       setLoading(true); // Set loading to true when starting the search\n//       const response = await axios.get(\n//         `http://hn.algolia.com/api/v1/search?query=${query}`\n//       );\n//       setSearchResults(response.data.hits);\n//       setSelectedPost(null); // Reset selected post when a new search is performed\n//     } catch (error) {\n//       console.error('Error fetching search results', error);\n//     } finally {\n//       setLoading(false); // Set loading to false when the search is complete\n//     }\n//   };\n\n//   const handleResultClick = async (result) => {\n//     try {\n//       setLoading(true); // Set loading to true when fetching post details\n//       const [postResponse, authorResponse] = await Promise.all([\n//         axios.get(`http://hn.algolia.com/api/v1/items/${result.objectID}`),\n//         axios.get(`http://hn.algolia.com/api/v1/users/${result.author}`),\n//       ]);\n\n//       const postDetails = postResponse.data;\n//       const authorDetails = authorResponse.data;\n\n//       setSelectedPost({ ...postDetails, authorDetails });\n//     } catch (error) {\n//       console.error('Error fetching post details', error);\n//     } finally {\n//       setLoading(false); // Set loading to false when post details are fetched\n//     }\n//   };\n\n//   useEffect(() => {\n//     // Use useEffect to simulate a loading delay (optional)\n//     const delay = setTimeout(() => {\n//       setLoading(false);\n//     }, 1000);\n\n//     return () => clearTimeout(delay); // Clear timeout on component unmount\n//   }, []);\n\n//   return (\n//     <div className=\"parent\">\n//       {loading ? (\n//         <div className=\"loading\">Loading...</div>\n//       ) : selectedPost ? (\n//         <div className=\"main-2\">\n//           <PostDetail post={selectedPost} onBack={onBack} />\n//         </div>\n//       ) : (\n//         <div className=\"main\">\n//           <div className=\"main-top\">\n//             <h1 className=\"heading\">Hacker News Search</h1>\n//             <SearchBar onSearch={handleSearch} />\n//           </div>\n//           {searchResults.length === 0 ? (\n//             <div className=\"noresult\">Search For Results</div>\n//           ) : (\n//             <div className=\"main-bottom\">\n//               <SearchResults\n//                 results={searchResults}\n//                 onResultClick={handleResultClick}\n//               />\n//             </div>\n//           )}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/harsh/OneDrive/Desktop/New folder/search-hacker/src/App.js"],"sourcesContent":["// // App.js\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import SearchBar from './components/SearchBar';\n// import SearchResults from './components/SearchResults';\n// import PostDetail from './components/PostDetail';\n// import \"./App.css\"\n\n// const App = () => {\n//   const [searchResults, setSearchResults] = useState([]);\n//   const [selectedPost, setSelectedPost] = useState(null);\n\n//   const onBack = () => {\n//     setSelectedPost(null);\n//   }\n//   const handleSearch = async (query) => {\n//     try {\n//       const response = await axios.get(\n//         `http://hn.algolia.com/api/v1/search?query=${query}`\n//       );\n//       setSearchResults(response.data.hits);\n//       setSelectedPost(null); // Reset selected post when a new search is performed\n//     } catch (error) {\n//       console.error('Error fetching search results', error);\n//     }\n//   };\n\n//   const handleResultClick = async (result) => {\n//     try {\n//       const [postResponse, authorResponse] = await Promise.all([\n//         axios.get(`http://hn.algolia.com/api/v1/items/${result.objectID}`),\n//         axios.get(`http://hn.algolia.com/api/v1/users/${result.author}`),\n//       ]);\n\n//       const postDetails = postResponse.data;\n//       const authorDetails = authorResponse.data;\n\n//       setSelectedPost({ ...postDetails, authorDetails });\n//     } catch (error) {\n//       console.error('Error fetching post details', error);\n//     }\n//   };\n\n//   return (\n//     <div className='parent'>\n//       {selectedPost ? (\n//         <div className='main-2'>\n//           {/* <button onClick={() => setSelectedPost(null)}>Back</button> */}\n//           <PostDetail post={selectedPost} onBack={onBack}/>\n//         </div>\n//       ) : (\n//         <div className='main'>\n//           <div className='main-top'>\n//             <h1 className='heading'>Hacker News Search</h1>\n//             <SearchBar onSearch={handleSearch} />\n//           </div>\n//           {searchResults.length === 0 ? <div className='noresult'>Search For Results</div> :\n//             <div className='main-bottom'>\n//               <SearchResults\n//                 results={searchResults}\n//                 onResultClick={handleResultClick}\n//                 />\n//             </div>\n//             }\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n// // #fbfaf8 - white\n// // 0A122A - blue\n// // 698F3F - green\n// // E7DECD - bone\n// // 804E49 - chocolate\n\n\n// // App.js\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import SearchBar from './components/SearchBar';\n// import SearchResults from './components/SearchResults';\n// import PostDetail from './components/PostDetail';\n// import './App.css';\n\n// const App = () => {\n//   const [searchResults, setSearchResults] = useState([]);\n//   const [selectedPost, setSelectedPost] = useState(null);\n//   const [loading, setLoading] = useState(false);\n\n//   const onBack = () => {\n//     setSelectedPost(null);\n//   };\n\n//   const handleSearch = async (query) => {\n//     try {\n//       setLoading(true); // Set loading to true when starting the search\n//       const response = await axios.get(\n//         `http://hn.algolia.com/api/v1/search?query=${query}`\n//       );\n//       setSearchResults(response.data.hits);\n//       setSelectedPost(null); // Reset selected post when a new search is performed\n//     } catch (error) {\n//       console.error('Error fetching search results', error);\n//     } finally {\n//       setLoading(false); // Set loading to false when the search is complete\n//     }\n//   };\n\n//   const handleResultClick = async (result) => {\n//     try {\n//       setLoading(true); // Set loading to true when fetching post details\n//       const [postResponse, authorResponse] = await Promise.all([\n//         axios.get(`http://hn.algolia.com/api/v1/items/${result.objectID}`),\n//         axios.get(`http://hn.algolia.com/api/v1/users/${result.author}`),\n//       ]);\n\n//       const postDetails = postResponse.data;\n//       const authorDetails = authorResponse.data;\n\n//       setSelectedPost({ ...postDetails, authorDetails });\n//     } catch (error) {\n//       console.error('Error fetching post details', error);\n//     } finally {\n//       setLoading(false); // Set loading to false when post details are fetched\n//     }\n//   };\n\n//   useEffect(() => {\n//     // Use useEffect to simulate a loading delay (optional)\n//     const delay = setTimeout(() => {\n//       setLoading(false);\n//     }, 1000);\n\n//     return () => clearTimeout(delay); // Clear timeout on component unmount\n//   }, []);\n\n//   return (\n//     <div className=\"parent\">\n//       {loading ? (\n//         <div className=\"loading\">Loading...</div>\n//       ) : selectedPost ? (\n//         <div className=\"main-2\">\n//           <PostDetail post={selectedPost} onBack={onBack} />\n//         </div>\n//       ) : (\n//         <div className=\"main\">\n//           <div className=\"main-top\">\n//             <h1 className=\"heading\">Hacker News Search</h1>\n//             <SearchBar onSearch={handleSearch} />\n//           </div>\n//           {searchResults.length === 0 ? (\n//             <div className=\"noresult\">Search For Results</div>\n//           ) : (\n//             <div className=\"main-bottom\">\n//               <SearchResults\n//                 results={searchResults}\n//                 onResultClick={handleResultClick}\n//               />\n//             </div>\n//           )}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}